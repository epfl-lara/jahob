([|(comment ''List.validIndex_def'' ((List_validIndex :: (int => bool)) = ((% (n::int). (((0 :: int) <= n) & (intless n (fieldRead (Array_length :: (obj => int)) (List_memory :: obj))))) :: (int => bool))));
(comment ''List.reacha_def'' ((List_reacha :: (obj => bool)) = ((% (x::obj). ((rtrancl_pt :: (((obj => ((obj => bool)))) => ((obj => ((obj => bool)))))) (% (x::obj) (y::obj). (((fieldRead (List_nexta :: (obj => obj)) x) :: obj) = (y :: obj))) (List_a :: obj) x)) :: (obj => bool))));
(comment ''List.reach_def'' ((List_reach :: (obj => ((obj => bool)))) = ((% (x::obj) (y::obj). ((rtrancl_pt :: (((obj => ((obj => bool)))) => ((obj => ((obj => bool)))))) (% (x::obj) (y::obj). (((fieldRead (List_nexta :: (obj => obj)) x) :: obj) = (y :: obj))) x y)) :: (obj => obj => bool))));
(((fieldRead Node_head null) :: obj) = (null :: obj));
(ALL (xObj::obj). ((xObj :: obj) : (Object :: obj set)));
(((List Int Array) :: obj set) = ({null} :: obj set));
(((Node Int Array) :: obj set) = ({null} :: obj set));
(((Node Int List) :: obj set) = ({null} :: obj set));
((null :: obj) : (Object_alloc :: obj set));
((List_a :: obj) : (Object_alloc :: obj set));
((List_b :: obj) : (Object_alloc :: obj set));
((List_memory :: obj) : (Object_alloc :: obj set));
(comment ''unalloc_lonely'' (ALL (x::obj). (((x :: obj) ~: (Object_alloc :: obj set)) --> ((ALL (y::obj). (((fieldRead Node_head y) :: obj) ~= (x :: obj))) & (ALL (z::obj) (i::int). (((arrayRead Array_arrayState z i) :: obj) ~= (x :: obj))) & ((List_a :: obj) ~= (x :: obj)) & ((List_b :: obj) ~= (x :: obj)) & ((List_memory :: obj) ~= (x :: obj)) & (((fieldRead Node_head x) :: obj) = (null :: obj)) & (ALL (j::int). (((arrayRead Array_arrayState x j) :: obj) = (null :: obj)))))));
(comment ''static_pointsto'' ((List_a :: obj) : (Node :: obj set)));
(comment ''static_pointsto'' ((List_b :: obj) : (Node :: obj set)));
(comment ''static_pointsto'' ((List_memory :: obj) : (Array :: obj set)));
(comment ''static_pointsto'' (ALL (i0::int). (((arrayRead Array_arrayState List_memory i0) :: obj) : (Node :: obj set))));
(comment '': ProcedurePrecondition'' ((List_memory :: obj) ~= (null :: obj)));
(comment '': ProcedurePrecondition'' (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (1 :: int)) :: obj) = (List_a :: obj)));
(comment '': ProcedurePrecondition'' (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (2 :: int)) :: obj) = (List_b :: obj)));
(comment '': ProcedurePrecondition'' ((3 :: int) <= (fieldRead (Array_length :: (obj => int)) (List_memory :: obj))));
(comment '': ProcedurePrecondition'' ((((fieldRead (Array_length :: (obj => int)) (List_memory :: obj)) mod (3 :: int)) :: int) = (0 :: int)));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((x :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_next :: (obj => int)) x))) --> (((fieldRead (List_nexta :: (obj => obj)) x) :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (fieldRead (Node_next :: (obj => int)) x)) :: obj)))));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((x :: obj) = (null :: obj)) | (~((List_validIndex :: (int => bool)) (fieldRead (Node_next :: (obj => int)) x)))) --> (((fieldRead (List_nexta :: (obj => obj)) x) :: obj) = (null :: obj)))));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((x :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_prev :: (obj => int)) x))) --> (((fieldRead (List_preva :: (obj => obj)) x) :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (fieldRead (Node_prev :: (obj => int)) x)) :: obj)))));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((x :: obj) = (null :: obj)) | (~((List_validIndex :: (int => bool)) (fieldRead (Node_prev :: (obj => int)) x)))) --> (((fieldRead (List_preva :: (obj => obj)) x) :: obj) = (null :: obj)))));
(comment '': dllista1ProcedurePrecondition'' (ALL (x::obj). ((((fieldRead (List_nexta :: (obj => obj)) (fieldRead (List_preva :: (obj => obj)) x)) :: obj) = (x :: obj)) | ((((fieldRead (List_preva :: (obj => obj)) x) :: obj) = (null :: obj)) & (ALL (y::obj). (((fieldRead (List_nexta :: (obj => obj)) y) :: obj) ~= (x :: obj)))))));
(comment '': dllista2ProcedurePrecondition'' (ALL (x::obj). ((((fieldRead (List_preva :: (obj => obj)) (fieldRead (List_nexta :: (obj => obj)) x)) :: obj) = (x :: obj)) | ((((fieldRead (List_nexta :: (obj => obj)) x) :: obj) = (null :: obj)) & (ALL (y::obj). (((fieldRead (List_preva :: (obj => obj)) y) :: obj) ~= (x :: obj)))))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((n mod (3 :: int)) :: int) = (0 :: int))) --> ((((fieldRead (Node_min :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)) :: int) = ((intplus n (1 :: int)) :: int)) | (((fieldRead (Node_min :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)) :: int) = ((intplus n (2 :: int)) :: int))))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((n mod (3 :: int)) :: int) ~= (0 :: int))) --> (((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)) | ((List_reach :: (obj => ((obj => bool)))) (List_b :: obj) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n))))));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) x) & ((x :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_next :: (obj => int)) x))) --> (intless (0 :: int) ((fieldRead (Node_next :: (obj => int)) x) mod (3 :: int))))));
(comment '': ProcedurePrecondition'' (ALL (x::obj). ((((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) x) & ((x :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_prev :: (obj => int)) x))) --> (intless (0 :: int) ((fieldRead (Node_prev :: (obj => int)) x) mod (3 :: int))))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((n mod (3 :: int)) :: int) = (0 :: int))) --> ((~((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n))) & (~((List_reach :: (obj => ((obj => bool)))) (List_b :: obj) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)))))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((n mod (3 :: int)) :: int) = (0 :: int))) --> (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n) :: obj) ~= (null :: obj)))));
(comment '': ProcedurePrecondition'' (ALL (n::int) (m::int). ((((List_validIndex :: (int => bool)) n) & ((List_validIndex :: (int => bool)) m) & (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n) :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) m) :: obj))) --> (((n :: int) = (m :: int)) | (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n) :: obj) = (null :: obj))))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n) :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_next :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)))) --> (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (fieldRead (Node_next :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n))) :: obj) ~= (null :: obj)))));
(comment '': ProcedurePrecondition'' (ALL (n::int). ((((List_validIndex :: (int => bool)) n) & (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n) :: obj) ~= (null :: obj)) & ((List_validIndex :: (int => bool)) (fieldRead (Node_prev :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n)))) --> (((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (fieldRead (Node_prev :: (obj => int)) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) n))) :: obj) ~= (null :: obj)))));
(comment '': aAcyclicProcedurePrecondition'' ((List_reacha :: (obj => bool)) null));
(comment '': abDisjointProcedurePrecondition'' (ALL (x::obj). ((((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) x) & ((List_reach :: (obj => ((obj => bool)))) (List_b :: obj) x)) --> ((x :: obj) = (null :: obj)))));
((0 :: int) <= (qa :: int));
(intless (qa :: int) (fieldRead (Array_length :: (obj => int)) (List_memory :: obj)));
((List_reach :: (obj => ((obj => bool)))) (List_a :: obj) (arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)));
(((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj) ~= (List_a :: obj));
(((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj) ~= (null :: obj));
(ALL (x::obj) (y::obj). ((((x :: obj) ~= (y :: obj)) & ((y :: obj) ~= (null :: obj)) & ((List_reach :: (obj => ((obj => bool)))) x y)) --> (((List_reach :: (obj => ((obj => bool)))) x (fieldRead (List_preva :: (obj => obj)) y)) & (((fieldRead (List_preva :: (obj => obj)) y) :: obj) ~= (null :: obj)))));
(comment ''why'' ((List_validIndex :: (int => bool)) (fieldRead (Node_next :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) ((fieldRead (Node_prev :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: obj))));
(comment ''TrueBranch'' (((0 :: int) <= ((fieldRead (Node_next :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: bool));
(comment ''TrueBranch'' ((intless ((fieldRead (Node_next :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int) ((fieldRead (Array_length :: (obj => int)) (List_memory :: obj)) :: int)) :: bool));
(comment ''List.reach_def'' ((List_reach_1 :: (obj => ((obj => bool)))) = ((% (x::obj) (y::obj). ((rtrancl_pt :: (((obj => ((obj => bool)))) => ((obj => ((obj => bool)))))) (% (x::obj) (y::obj). (((fieldRead ((fieldWrite ((fieldWrite (List_nexta :: (obj => obj)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) ((fieldRead (Node_prev :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: obj) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) ((fieldRead (Node_next :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: obj)) :: (obj => obj)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj) null) :: (obj => obj)) x) :: obj) = (y :: obj))) x y)) :: (obj => obj => bool))));
(comment ''List.reacha_def'' ((List_reacha_1 :: (obj => bool)) = ((% (x::obj). ((rtrancl_pt :: (((obj => ((obj => bool)))) => ((obj => ((obj => bool)))))) (% (x::obj) (y::obj). (((fieldRead ((fieldWrite ((fieldWrite (List_nexta :: (obj => obj)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) ((fieldRead (Node_prev :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: obj) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) ((fieldRead (Node_next :: (obj => int)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj)) :: int)) :: obj)) :: (obj => obj)) ((arrayRead (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int)) :: obj) null) :: (obj => obj)) x) :: obj) = (y :: obj))) (List_a :: obj) x)) :: (obj => bool))));
(comment '': _ProcedureEndPostcondition'' ((List_validIndex :: (int => bool)) n_2_273));
(comment '': _ProcedureEndPostcondition'' (((n_2_273 mod (3 :: int)) :: int) ~= (0 :: int)))|] ==>
    (comment '': _ProcedureEndPostcondition'' (((List_reach_1 :: (obj => ((obj => bool)))) (List_a :: obj) (arrayRead ((arrayWrite (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int) null) :: (obj => (int => obj))) (List_memory :: obj) n_2_273)) | ((List_reach_1 :: (obj => ((obj => bool)))) (List_b :: obj) (arrayRead ((arrayWrite (Array_arrayState :: (obj => (int => obj))) (List_memory :: obj) (qa :: int) null) :: (obj => (int => obj))) (List_memory :: obj) n_2_273)))))