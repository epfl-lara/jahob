PTREE DEFINITION
([|((e::obj) : (Object_alloc :: obj set));
((e::obj) : (Node :: obj set));
((pos::obj) : (Object_alloc :: obj set));
((pos::obj) : (Node :: obj set));
((((Node_r :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((((Node_l :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((((Node_p :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((e::obj) ~= (null::obj));
((e::obj) ~= (Tree_root::obj));
(~(((Tree_root::obj) ~= (null::obj)) & ((e::obj) ~= (null::obj)) & ((rtrancl_pt :: ((obj => (obj=>bool)) => (obj => (obj=>bool)))) (% (x::obj) (y::obj). ((((Node_p :: (obj=>obj)) x) :: obj) = (y::obj))) (e::obj) (Tree_root::obj))));
((((Node_l :: (obj=>obj)) (pos::obj)) :: obj) = (null::obj));
((pos::obj) ~= (null::obj));
((Tree_root::obj) ~= (null::obj));
((pos::obj) ~= (null::obj));
((rtrancl_pt :: ((obj => (obj=>bool)) => (obj => (obj=>bool)))) (% (x::obj) (y::obj). ((((Node_p :: (obj=>obj)) x) :: obj) = (y::obj))) (pos::obj) (Tree_root::obj));
(ALL (x::obj). (((((Node_l :: (obj=>obj)) x) :: obj) ~= (Tree_root::obj)) & ((((Node_r :: (obj=>obj)) x) :: obj) ~= (Tree_root::obj))));
((((Node_p :: (obj=>obj)) (Tree_root::obj)) :: obj) = (null::obj));
((ptree :: ((obj=>obj) => (((obj=>obj) list) => bool))) (Node_p :: (obj=>obj)) [(Node_l :: (obj=>obj)), (Node_r :: (obj=>obj))]);
((Tree_root::obj) : (Node :: obj set))|] ==>
    ((ALL (v_5::obj). (rtrancl_pt (% (v_5::obj) (v_4::obj). ((((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) v_5) = v_4)) v_5 null)) & (ALL (v_5::obj) (v_4::obj) (v_3::obj). ((((((Node_r :: (obj=>obj)) v_3) = v_5) | ((((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) v_3) = v_5)) & ((((Node_r :: (obj=>obj)) v_4) = v_5) | ((((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) v_4) = v_5)) & (null~=v_5)) --> (v_4=v_3))) & ((ALL (v_5::obj). ((((((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) ((Node_r :: (obj=>obj)) v_5)) = v_5) | (((Node_r :: (obj=>obj)) v_5) = null)) & (((((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) (((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) v_5)) = v_5) | ((((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) v_5) = null)))) & (ALL (v_5::obj) (v_4::obj). (((((Node_r :: (obj=>obj)) (((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) v_5)) = v_5) | ((((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) (((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) v_5)) = v_5)) | (((((fieldWrite (Node_p :: (obj=>obj)) (e::obj) (pos::obj)) :: (obj=>obj)) v_5) = null) & (((((Node_r :: (obj=>obj)) v_4) = v_5) | ((((fieldWrite (Node_l :: (obj=>obj)) (pos::obj) (e::obj)) :: (obj=>obj)) v_4) = v_5)) --> (v_5=null))))))))



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
P predicates... 
(% (v_6::obj) (w_1::obj). ((v_6=e) --> False))  
(% (v_6::obj) (w_1::obj). True)
Before step 3 after rewritting fildWrites
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

([|((Tree_root::obj) : (Node :: obj set));
((((Node_p :: (obj=>obj)) (Tree_root::obj)) :: obj) = (null::obj));
(ALL (x::obj). (((((Node_l :: (obj=>obj)) x) :: obj) ~= (Tree_root::obj)) & ((((Node_r :: (obj=>obj)) x) :: obj) ~= (Tree_root::obj))));
(parent_reach (% (v_6::obj) (w_1::obj). True) (pos::obj) (Tree_root::obj));
((pos::obj) ~= (null::obj));
((Tree_root::obj) ~= (null::obj));
((pos::obj) ~= (null::obj));
((((Node_l :: (obj=>obj)) (pos::obj)) :: obj) = (null::obj));
(~(((Tree_root::obj) ~= (null::obj)) & ((e::obj) ~= (null::obj)) & (parent_reach (% (v_6::obj) (w_1::obj). True) (e::obj) (Tree_root::obj))));
((e::obj) ~= (Tree_root::obj));
((e::obj) ~= (null::obj));
((((Node_p :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((((Node_l :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((((Node_r :: (obj=>obj)) (e::obj)) :: obj) = (null::obj));
((pos::obj) : (Node :: obj set));
((pos::obj) : (Object_alloc :: obj set));
((e::obj) : (Node :: obj set));
((e::obj) : (Object_alloc :: obj set))|]

SOME AXIOMS
ax_refl: 
 '' (ALL (t_1::obj). (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t_1 t_1))) & (comment ''
 ax_trans: 
 '' (ALL (t1_1::obj) (t2_1::obj) (t3_1::obj). (((parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t1_1 t2_1) & (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t2_1 t3_1)) --> (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t1_1 t3_1)))) & (comment ''
 ax_antiSym: 
 '' (ALL (t1_1::obj) (t2_1::obj). (((parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t1_1 t2_1) & (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t2_1 t1_1)) --> (t1_1=t2_1)))) & (comment ''
 ax_total: 
 '' (ALL (t1_1::obj) (t2_1::obj). (((parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t1_1 t2_1) & (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t1_1 t3_1)) --> ((parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t3_1 t2_1) | (parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) t2_1 t3_1)))))
==>
    ((ALL (v_5::obj). ((parent_reach (% (v_6::obj) (w_1::obj). ((v_6=e) --> False)) v_5 null) 


After step 3 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
P predicates... 
(% (v_6::obj) (w_1::obj). ((v_6=e) --> False))  <-------bp2
(% (v_6::obj) (w_1::obj). True)                 <-------bp1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Axioms Fig 5 for bp1 bp2
&
Axioms Fig 6 for bp1 bp2
bpQ-def1 "ALL t1. P(t1,bp1(t1))" 
bpQ-def1 "ALL t1. P(t1,bp2(t1))"
& 
.....:::
(parent_reach (% (v_6::obj) (w_1::obj). True) (pos::obj) (Tree_root::obj));
REPLACED BY
P pos Tree_root & P Tree_root bp1(pos)

.....:::
==>
((ALL (v_5::obj). ((parent_reach (% (v_6::obj) (w_1::obj). True & ((v_6=e) --> False)) v_5 null)
REPLACED BY
(ALL v_5. P v_5 null & P null bp2(v_5) )


Step 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
