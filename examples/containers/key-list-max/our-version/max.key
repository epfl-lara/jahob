

\javaSource "./";

\programVariables {
	List x;
	int res;
}

\functions {
	int len;
	Node nodes(int);
}

/*
 modifies: t, max

 invariant:
 \exists int k; ( k >= 0 & k < len & t = nodes(k)
    &
    \forall int j; ( j >= 0 & j <= k -> max >= nodes(j).val )
    &
    \exists int j; ( j >= 0 & j <= k & max = nodes(j).val ))
 

 variant:
 len - (\ifEx int i; (t=nodes(i)) \then (i) \else (0))




 introduce by cut:
 \forall int i;  \forall int j; 
 (!i = j -> i >= 0 -> j >= 0 -> i <= len -> j <= len -> !nodes(i) = nodes(j))

 in order to proof the cutted formula, make an induction over i for:
  (   j_2 + i <= len
      -> i_10 + i <= len
      -> nodes(j_2 + i) = nodes(i_10 + i))
*/

\problem {
	len >= 0 ->
	x != null ->
	nodes(0) = x.head ->
	\forall int j; (j > 0 -> nodes(j) = nodes(j-1).next) ->
	nodes(len) = null ->
	\forall int j; (j >= 0 & j < len -> nodes(j) != null) ->
	\forall int k;  \forall int j; 
 	     (!k = j -> k >= 0 -> j >= 0 -> k <= len -> j <= len
		 -> !nodes(k) = nodes(j)) ->
	\<{ res = x.max(); }\>
	(
		\forall int j; ( j >= 0 & j < len -> res >= nodes(j).val )
		&
                (len > 0 ->
		 \exists int j; ( j >= 0 & j < len & res = nodes(j).val ))
	)
}
