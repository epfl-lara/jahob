((EX j_20. ((tmp_14 = ((j_20 :: int) - (1 :: int))) & ((tmp_9 :: bool) --> (EX Array_arrayState_18. (comment ''array write bounds check'' (((0 :: int) <= (tmp_13 :: int)) & (intless (tmp_13 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & (tmp_13 = ((j_20 :: int) - (1 :: int))) & (EX Array_arrayState_16. (comment ''array write bounds check'' (((0 :: int) <= (j_20 :: int)) & (intless (j_20 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & (tmp_12 = (arrayRead (Array_arrayState_16 :: (obj => (int => obj))) (arr :: obj) (tmp_11 :: int))) & (tmp_11 = ((j_20 :: int) - (1 :: int))) & (tmp_10 = (arrayRead (Array_arrayState_16 :: (obj => (int => obj))) (arr :: obj) (j_20 :: int))) & (tmp_9 = (intless (tmp_5 :: int) (tmp_8 :: int))) & comment ''null dereference'' ((tmp_7 :: obj) ~= null) & comment ''array read bounds check'' (((0 :: int) <= (tmp_6 :: int)) & (intless (tmp_6 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & (tmp_5 = (fieldRead (InsertionSortNode_key :: (obj => int)) (tmp_4 :: obj))) & (tmp_4 = (arrayRead (Array_arrayState_16 :: (obj => (int => obj))) (arr :: obj) (j_20 :: int))) & (tmp_3 :: bool) & ((arr :: obj) ~= null) & (tmp_3 = ((0 :: int) < (j_20 :: int))) & comment ''array read bounds check'' (((0 :: int) <= (j_20 :: int)) & (intless (j_20 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & comment ''null dereference'' ((tmp_4 :: obj) ~= null) & (tmp_6 = ((j_20 :: int) - (1 :: int))) & (tmp_7 = (arrayRead (Array_arrayState_16 :: (obj => (int => obj))) (arr :: obj) (tmp_6 :: int))) & (tmp_8 = (fieldRead (InsertionSortNode_key :: (obj => int)) (tmp_7 :: obj))) & (tmp = (tmp_10 :: obj)) & comment ''array read bounds check'' (((0 :: int) <= (tmp_11 :: int)) & (intless (tmp_11 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & comment ''array non-null check'' ((arr :: obj) ~= null) & (Array_arrayState_18 = (arrayWrite (Array_arrayState_16 :: (obj => (int => obj))) (arr :: obj) (j_20 :: int) (tmp_12 :: obj))))) & comment ''array non-null check'' ((arr :: obj) ~= null) & (Array_arrayState = (arrayWrite (Array_arrayState_18 :: (obj => (int => obj))) (arr :: obj) (tmp_13 :: int) (tmp :: obj)))))) & ((~(tmp_9 :: bool)) --> ((tmp_8 = (fieldRead (InsertionSortNode_key :: (obj => int)) (tmp_7 :: obj))) & (tmp_7 = (arrayRead (Array_arrayState :: (obj => (int => obj))) (arr :: obj) (tmp_6 :: int))) & (tmp_6 = ((j_20 :: int) - (1 :: int))) & comment ''null dereference'' ((tmp_4 :: obj) ~= null) & comment ''array read bounds check'' (((0 :: int) <= (j_20 :: int)) & (intless (j_20 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & (tmp_3 = ((0 :: int) < (j_20 :: int))) & ((arr :: obj) ~= null) & (tmp_3 :: bool) & (tmp_4 = (arrayRead (Array_arrayState :: (obj => (int => obj))) (arr :: obj) (j_20 :: int))) & (tmp_5 = (fieldRead (InsertionSortNode_key :: (obj => int)) (tmp_4 :: obj))) & comment ''array read bounds check'' (((0 :: int) <= (tmp_6 :: int)) & (intless (tmp_6 :: int) (fieldRead (Array_length :: (obj => int)) (arr :: obj)))) & comment ''null dereference'' ((tmp_7 :: obj) ~= null) & (tmp_9 = (intless (tmp_5 :: int) (tmp_8 :: int))))) & (j = (tmp_14 :: int)))) --> ((arr :: obj) ~= null))