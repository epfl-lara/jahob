([|((MapArray_maxSize :: (obj => int)) = ((% (this::obj). (fieldRead (Array_length :: (obj => int)) (fieldRead (MapArray_a :: (obj => obj)) (this :: obj)))) :: (obj => int)));
((token_NoOwner :: int) ~= (token_Object :: int));
((token_NoOwner :: int) ~= (token_Array :: int));
((token_NoOwner :: int) ~= (token_MapArray :: int));
((token_NoOwner :: int) ~= (token_Node :: int));
((token_Object :: int) ~= (token_Array :: int));
((token_Object :: int) ~= (token_MapArray :: int));
((token_Object :: int) ~= (token_Node :: int));
((token_Array :: int) ~= (token_MapArray :: int));
((token_Array :: int) ~= (token_Node :: int));
((token_MapArray :: int) ~= (token_Node :: int));
comment ''unalloc_lonely_Node'' (ALL (x::obj). ((((x :: obj) : (Node :: obj set)) & ((x :: obj) ~: (Object_alloc :: obj set))) --> ((ALL (y::obj). (((fieldRead Node_key y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead Node_value y) :: obj) ~= (x :: obj))) & (((fieldRead Object_owner x) :: int) = (token_NoOwner :: int)) & (((fieldRead Node_key x) :: obj) = (null :: obj)) & (((fieldRead Node_value x) :: obj) = (null :: obj)))));
comment ''unalloc_lonely_MapArray'' (ALL (x::obj). ((((x :: obj) : (MapArray :: obj set)) & ((x :: obj) ~: (Object_alloc :: obj set))) --> ((ALL (y::obj). (((fieldRead Node_key y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead Node_value y) :: obj) ~= (x :: obj))) & (((fieldRead Object_owner x) :: int) = (token_NoOwner :: int)) & (((fieldRead Node_key x) :: obj) = (null :: obj)) & (((fieldRead Node_value x) :: obj) = (null :: obj)))));
comment ''unalloc_lonely_Array'' (ALL (x::obj). ((((x :: obj) : (Array :: obj set)) & ((x :: obj) ~: (Object_alloc :: obj set))) --> ((ALL (y::obj). (((fieldRead Node_key y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead Node_value y) :: obj) ~= (x :: obj))) & (((fieldRead Object_owner x) :: int) = (token_NoOwner :: int)) & (((fieldRead Node_key x) :: obj) = (null :: obj)) & (((fieldRead Node_value x) :: obj) = (null :: obj)))));
comment ''unalloc_lonely_Object'' (ALL (x::obj). ((((x :: obj) : (Object :: obj set)) & ((x :: obj) ~: (Object_alloc :: obj set))) --> ((ALL (y::obj). (((fieldRead Node_key y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead Node_value y) :: obj) ~= (x :: obj))) & (((fieldRead Object_owner x) :: int) = (token_NoOwner :: int)) & (((fieldRead Node_key x) :: obj) = (null :: obj)) & (((fieldRead Node_value x) :: obj) = (null :: obj)))));
(pointsto Node Node_value Object);
(pointsto Node Node_key Object);
((null :: obj) : (Object_alloc :: obj set));
(((Object Int Array) :: obj set) = ({null} :: obj set));
(((Object Int MapArray) :: obj set) = ({null} :: obj set));
(((Object Int Node) :: obj set) = ({null} :: obj set));
(((Array Int MapArray) :: obj set) = ({null} :: obj set));
(((Array Int Node) :: obj set) = ({null} :: obj set));
(((MapArray Int Node) :: obj set) = ({null} :: obj set));
(((fieldRead Node_value null) :: obj) = (null :: obj));
(((fieldRead Node_key null) :: obj) = (null :: obj));
(ALL (this::obj) (k::obj) (v::obj). ((((k, v) :: (obj * obj)) : ((fieldRead (MapArray_map :: (obj => ((obj * obj)) set)) (this :: obj)) :: ((obj * obj)) set)) --> (((k :: obj) ~= (null :: obj)) & ((v :: obj) ~= (null :: obj)))));
(ALL (this::obj). ((((fieldRead (MapArray_a :: (obj => obj)) (this :: obj)) :: obj) ~= (null :: obj)) & (((fieldRead Object_owner (fieldRead (MapArray_a :: (obj => obj)) (this :: obj))) :: int) = (token_MapArray :: int))));
comment ''valuesNonNull'' (ALL (this::obj) (i::int) (n::obj). (((intless i (fieldRead (MapArray_size :: (obj => int)) this)) & ((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (MapArray :: obj set)) & ((0 :: int) <= (i :: int)) & ((n :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) this) i) :: obj))) --> ((((fieldRead (Node_key :: (obj => obj)) n) :: obj) ~= (null :: obj)) & ((n :: obj) ~= (null :: obj)) & (((fieldRead (Node_value :: (obj => obj)) n) :: obj) ~= (null :: obj)))));
comment ''arraysDisjoint'' (ALL (ma1::obj) (ma2::obj) (n1::obj) (i::int) (j::int). ((((n1 :: obj) ~= (null :: obj)) & (intless j (fieldRead (MapArray_size :: (obj => int)) ma2)) & (intless i (fieldRead (MapArray_size :: (obj => int)) ma1)) & ((ma2 :: obj) : (MapArray :: obj set)) & ((ma2 :: obj) : (Object_alloc :: obj set)) & ((ma1 :: obj) : (Object_alloc :: obj set)) & ((ma1 :: obj) : (MapArray :: obj set)) & ((0 :: int) <= (i :: int)) & ((0 :: int) <= (j :: int)) & ((n1 :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) ma1) i) :: obj)) & ((n1 :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) ma2) j) :: obj))) --> ((ma1 :: obj) = (ma2 :: obj))));
comment ''noDuplicates'' (ALL (this::obj) (i::int) (j::int) (ni::obj) (nj::obj). ((((nj :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) this) j) :: obj)) & (intless j (fieldRead (MapArray_size :: (obj => int)) this)) & (intless i (fieldRead (MapArray_size :: (obj => int)) this)) & ((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (MapArray :: obj set)) & ((0 :: int) <= (i :: int)) & ((0 :: int) <= (j :: int)) & ((ni :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) this) i) :: obj)) & (((fieldRead (Node_key :: (obj => obj)) ni) :: obj) = ((fieldRead (Node_key :: (obj => obj)) nj) :: obj))) --> ((i :: int) = (j :: int))));
((MapArray_map :: (obj => ((obj * obj)) set)) = ((% (this::obj). {p. (EX (k::obj) (v::obj). (((p :: (obj * obj)) = ((k, v) :: (obj * obj))) & (EX (i::int) (n::obj). (((k :: obj) = ((fieldRead (Node_key :: (obj => obj)) n) :: obj)) & ((n :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) (this :: obj)) i) :: obj)) & ((0 :: int) <= (i :: int)) & (intless i (fieldRead (MapArray_size :: (obj => int)) (this :: obj))) & ((n :: obj) ~= (null :: obj)) & ((v :: obj) = ((fieldRead (Node_value :: (obj => obj)) n) :: obj))))))}) :: (obj => (((obj * obj)) set))));
comment ''thisNotNull'' ((this :: obj) ~= (null :: obj));
comment ''tmp_1_type'' ((tmp_1 :: obj) : (Array :: obj set));
comment ''tmp_1_type'' ((tmp_1 :: obj) : (Object_alloc :: obj set));
(((fieldRead Array_length tmp_1_7) :: int) = (s :: int));
(ALL (y::obj). (((fieldRead Node_key y) :: obj) ~= (tmp_1_7 :: obj)));
(ALL (y::obj). (((fieldRead Node_value y) :: obj) ~= (tmp_1_7 :: obj)));
(((fieldRead Object_owner tmp_1_7) :: int) = (token_NoOwner :: int));
(((fieldRead Node_key tmp_1_7) :: obj) = (null :: obj));
(((fieldRead Node_value tmp_1_7) :: obj) = (null :: obj));
((tmp_1_7 :: obj) ~: (Object_alloc :: obj set));
((tmp_1_7 :: obj) ~= (null :: obj));
((MapArray_map_4 :: (obj => (((obj * obj)) set))) = ((% (this__10::obj). {p. (EX (k::obj) (v::obj). (((p :: (obj * obj)) = ((k, v) :: (obj * obj))) & (EX (i::int) (n::obj). (((k :: obj) = ((fieldRead (Node_key :: (obj => obj)) n) :: obj)) & ((n :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead ((fieldWrite (MapArray_a :: (obj => obj)) (this :: obj) (tmp_1_7 :: obj)) :: (obj => obj)) (this__10 :: obj)) i) :: obj)) & ((0 :: int) <= (i :: int)) & (intless i (fieldRead (MapArray_size :: (obj => int)) (this__10 :: obj))) & ((n :: obj) ~= (null :: obj)) & ((v :: obj) = ((fieldRead (Node_value :: (obj => obj)) n) :: obj))))))}) :: (obj => (((obj * obj)) set))));
((MapArray_maxSize_5 :: (obj => int)) = ((% (this__9::obj). (fieldRead (Array_length :: (obj => int)) (fieldRead ((fieldWrite (MapArray_a :: (obj => obj)) (this :: obj) (tmp_1_7 :: obj)) :: (obj => obj)) (this__9 :: obj)))) :: (obj => int)));
(ALL (ma::obj). (((ma :: obj) : (Object_alloc :: obj set)) --> (((fieldRead (MapArray_a :: (obj => obj)) ma) :: obj) : (Object_alloc :: obj set))));
comment ''thisType'' ((this :: obj) : (MapArray :: obj set));
comment ''thisType'' ((this :: obj) : (Object_alloc :: obj set));
((MapArray_map_1 :: (obj => ((obj * obj)) set)) = ((% (this__4::obj). {p. (EX (k::obj) (v::obj). (((p :: (obj * obj)) = ((k, v) :: (obj * obj))) & (EX (i::int) (n::obj). (((k :: obj) = ((fieldRead (Node_key :: (obj => obj)) n) :: obj)) & ((n :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead ((fieldWrite (MapArray_a :: (obj => obj)) (this :: obj) (tmp_1_7 :: obj)) :: (obj => obj)) (this__4 :: obj)) i) :: obj)) & ((0 :: int) <= (i :: int)) & (intless i (fieldRead ((fieldWrite (MapArray_size :: (obj => int)) (this :: obj) (0 :: int)) :: (obj => int)) (this__4 :: obj))) & ((n :: obj) ~= (null :: obj)) & ((v :: obj) = ((fieldRead (Node_value :: (obj => obj)) n) :: obj))))))}) :: (obj => (((obj * obj)) set))));
comment ''otherASame'' (ALL (tt::obj). ((((tt :: obj) : ((Object_alloc \<setminus> {tmp_1_7}) :: obj set)) & ((tt :: obj) : (MapArray :: obj set)) & ((tt :: obj) ~= (this :: obj))) --> (((fieldRead ((fieldWrite (MapArray_a :: (obj => obj)) (this :: obj) (tmp_1_7 :: obj)) :: (obj => obj)) tt) :: obj) = ((fieldRead (MapArray_a :: (obj => obj)) tt) :: obj))));
comment ''otherAElemSame'' (ALL (tt::obj) (i::int). ((((tt :: obj) : ((Object_alloc \<setminus> {tmp_1_7}) :: obj set)) & ((tt :: obj) : (MapArray :: obj set)) & ((tt :: obj) ~= (this :: obj))) --> (((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead ((fieldWrite (MapArray_a :: (obj => obj)) (this :: obj) (tmp_1_7 :: obj)) :: (obj => obj)) tt) i) :: obj) = ((arrayRead (Array_arrayState :: (obj => (int => obj))) (fieldRead (MapArray_a :: (obj => obj)) tt) i) :: obj))));
comment ''othersSame'' (ALL (tt::obj). ((((tt :: obj) : ((Object_alloc \<setminus> {tmp_1_7}) :: obj set)) & ((tt :: obj) : (MapArray :: obj set)) & ((tt :: obj) ~= (this :: obj))) --> (((fieldRead (MapArray_map_1 :: (obj => ((obj * obj)) set)) tt) :: ((obj * obj)) set) = ((fieldRead (MapArray_map :: (obj => ((obj * obj)) set)) tt) :: ((obj * obj)) set))));
(((fieldRead Object_owner framedObj) :: int) ~= (token_MapArray :: int));
((framedObj :: obj) : (MapArray :: obj set));
((framedObj :: obj) : ((Object_alloc \<setminus> {tmp_1_7}) :: obj set));
((framedObj :: obj) ~= (this :: obj))|] ==>
    (((fieldRead MapArray_map_1 framedObj) :: ((obj * obj)) set) = ((fieldRead MapArray_map framedObj) :: ((obj * obj)) set)))