([|(List_content = (% this. {x. (EX n. ((n : (fieldRead Node_nodes (fieldRead List_first this))) & (x = (fieldRead Node_data n))))}));
(List_edge = (% x y. (((x : Node) & (y = (fieldRead Node_next x))) | ((x : List) & (y = (fieldRead List_first x))))));
((fieldRead List_first null) = null);
((fieldRead Node_data null) = null);
((fieldRead Node_next null) = null);
(ALL xObj. (xObj : Object));
((List Int Node) = {null});
((Array Int Node) = {null});
((Array Int List) = {null});
(null : Object_alloc);
(pointsto List List_first Node);
(pointsto Node Node_data Object);
(pointsto Node Node_next Node);
comment ''unalloc_lonely_Object'' (ALL x. (((x : Object) & (x ~: Object_alloc)) --> ((ALL y. ((fieldRead List_first y) ~= x)) & (ALL y. ((fieldRead Node_data y) ~= x)) & (ALL y. ((fieldRead Node_next y) ~= x)) & ((fieldRead List_first x) = null) & ((fieldRead Node_data x) = null) & ((fieldRead Node_next x) = null))));
comment ''unalloc_lonely_Array'' (ALL x. (((x : Array) & (x ~: Object_alloc)) --> ((ALL y. ((fieldRead List_first y) ~= x)) & (ALL y. ((fieldRead Node_data y) ~= x)) & (ALL y. ((fieldRead Node_next y) ~= x)) & ((fieldRead List_first x) = null) & ((fieldRead Node_data x) = null) & ((fieldRead Node_next x) = null))));
comment ''unalloc_lonely_List'' (ALL x. (((x : List) & (x ~: Object_alloc)) --> ((ALL y. ((fieldRead List_first y) ~= x)) & (ALL y. ((fieldRead Node_data y) ~= x)) & (ALL y. ((fieldRead Node_next y) ~= x)) & ((fieldRead List_first x) = null) & ((fieldRead Node_data x) = null) & ((fieldRead Node_next x) = null))));
comment ''unalloc_lonely_Node'' (ALL x. (((x : Node) & (x ~: Object_alloc)) --> ((ALL y. ((fieldRead List_first y) ~= x)) & (ALL y. ((fieldRead Node_data y) ~= x)) & (ALL y. ((fieldRead Node_next y) ~= x)) & ((fieldRead List_first x) = null) & ((fieldRead Node_data x) = null) & ((fieldRead Node_next x) = null))));
comment ''List_PrivateInv ContentAllocProcedurePrecondition'' (ALL this. (((this : Object_alloc) & (this : List)) --> ((fieldRead List_content this) \<subseteq> Object_alloc)));
comment ''List_PrivateInv InjProcedurePrecondition'' (ALL x1 x2 y. (((y ~= null) & (List_edge x1 y) & (List_edge x2 y)) --> (x1 = x2)));
comment ''WhileIn_List_OutsidePublicInvOf_List ContentAllocProcedurePrecondition'' (ALL this. (((this : Object_alloc) & (this : List)) --> ((fieldRead List_content this) \<subseteq> Object_alloc)));
comment ''WhileIn_List_OutsidePublicInvOf_Node NodesAllocProcedurePrecondition'' (ALL this. (((this : Object_alloc) & (this : Node)) --> ((fieldRead Node_nodes this) \<subseteq> Object_alloc)));
comment ''WhileIn_List_OutsidePublicInvOf_Node NodesNullProcedurePrecondition'' (ALL this. (((this : Object_alloc) & (this : Node) & (this = null)) --> ((fieldRead Node_nodes this) = {})));
comment ''WhileIn_List_OutsidePublicInvOf_Node NodesDefProcedurePrecondition'' (ALL this. (((this : Object_alloc) & (this : Node) & (this ~= null)) --> (((fieldRead Node_nodes this) = ({this} Un (fieldRead Node_nodes (fieldRead Node_next this)))) & (this ~: (fieldRead Node_nodes (fieldRead Node_next this))))));
comment ''thisNotNull'' (this ~= null);
comment ''thisType'' (this : List);
comment ''thisType'' (this : Object_alloc);
comment ''o1_type'' (o1 : Object);
comment ''o1_type'' (o1 : Object_alloc);
comment ''tmp_7_type'' (tmp_7 : Node);
comment ''tmp_7_type'' (tmp_7 : Object_alloc);
comment ''tmp_5_type'' (tmp_5 : Node);
comment ''tmp_5_type'' (tmp_5 : Object_alloc);
comment ''nxt_type'' (nxt : Node);
comment ''nxt_type'' (nxt : Object_alloc);
comment ''tmp_3_type'' (tmp_3 : Object);
comment ''tmp_3_type'' (tmp_3 : Object_alloc);
comment ''tmp_1_type'' (tmp_1 : Node);
comment ''tmp_1_type'' (tmp_1 : Object_alloc);
comment ''current_type'' (current : Node);
comment ''current_type'' (current : Object_alloc);
comment ''prev_type'' (prev : Node);
comment ''prev_type'' (prev : Object_alloc);
(init_nodes = (fieldRead Node_nodes (fieldRead List_first this)));
(to_remove = {n. ((n : init_nodes) & ((fieldRead Node_data n) = o1))});
(desired_nodes = (init_nodes \<setminus> to_remove));
(List_content_23 = (% this__7. {x. (EX n. ((n : (fieldRead Node_nodes_35 (fieldRead List_first_29 this__7))) & (x = (fieldRead Node_data n))))}));
(List_edge_22 = (% x y. (((x : Node) & (y = (fieldRead Node_next_28 x))) | ((x : List) & (y = (fieldRead List_first_29 x))))));
comment ''AssumingLoopInv'' ((fieldRead Node_nodes_35 current_27) \<subseteq> init_nodes);
comment ''AssumingLoopInv'' ((prev_26 = null) --> (((fieldRead List_first_29 this) = current_27) & (desired_nodes \<subseteq> (fieldRead Node_nodes_35 current_27))));
comment ''AssumingLoopInv'' ((prev_26 ~= null) --> (((fieldRead Node_next_28 prev_26) = current_27) & ((fieldRead Node_nodes_35 (fieldRead List_first_29 this)) = desired_nodes)));
comment ''AssumingLoopInv'' (ALL n. (((n : Node) & (n : Object_alloc) & (n ~= null) & (n ~= prev_26)) --> ((fieldRead Node_nodes_35 n) = ({n} Un (fieldRead Node_nodes_35 (fieldRead Node_next_28 n))))));
comment ''AssumingLoopInv'' ((fieldRead Node_nodes_35 null) = {});
comment ''AssumingLoopInv'' (ALL x1 x2 y. (((y ~= null) & (List_edge_22 x1 y) & (List_edge_22 x2 y)) --> (x1 = x2)));
comment ''LoopConditionHolds'' (current_27 ~= null);
(current_27 : Node);
(current_27 : Object_alloc);
(prev_26 : Node);
(prev_26 : Object_alloc);
(current_27 ~= prev_26);
(current_27 ~= (fieldRead List_first_29 this));
(prev_26 ~= (fieldRead List_first_29 this));
(List_content_19 = (% this__8. {x. (EX n. ((n : (fieldRead (fieldWrite Node_nodes_35 current_27 desired_nodes) (fieldRead List_first_29 this__8))) & (x = (fieldRead Node_data n))))}));
comment ''TrueBranch'' ((fieldRead Node_data current_27) = o1);
comment ''FalseBranch'' (prev_26 ~= null);
(List_edge_9 = (% x y. (((x : Node) & (y = (fieldRead (fieldWrite Node_next_28 prev_26 (fieldRead Node_next_28 current_27)) x))) | ((x : List) & (y = (fieldRead List_first_29 x))))));
(List_edge_4 = (% x y. (((x : Node) & (y = (fieldRead (fieldWrite (fieldWrite Node_next_28 prev_26 (fieldRead Node_next_28 current_27)) current_27 null) x))) | ((x : List) & (y = (fieldRead List_first_29 x))))));
(List_content_2 = (% this__9. {x. (EX n. ((n : (fieldRead (fieldWrite (fieldWrite Node_nodes_35 current_27 desired_nodes) current_27 {current_27}) (fieldRead List_first_29 this__9))) & (x = (fieldRead Node_data n))))}));
(y ~= null);
(List_edge_4 x1 y);
(List_edge_4 x2 y)|] ==>
    comment ''LoopInvPreserved'' (x1 = x2))