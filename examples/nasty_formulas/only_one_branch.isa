([|(((fieldRead Pair_data null) :: obj) = (null :: obj));
(((fieldRead FuncTree_data null) :: obj) = (null :: obj));
(((fieldRead FuncTree_left null) :: obj) = (null :: obj));
(((fieldRead FuncTree_right null) :: obj) = (null :: obj));
(ALL (xObj::obj). ((xObj :: obj) : (Object :: obj set)));
(((Pair Int FuncTree) :: obj set) = ({null} :: obj set));
(((Array Int FuncTree) :: obj set) = ({null} :: obj set));
(((Array Int Pair) :: obj set) = ({null} :: obj set));
((null :: obj) : (Object_alloc :: obj set));
(pointsto Pair Pair_data Object);
(pointsto FuncTree FuncTree_data Object);
(pointsto FuncTree FuncTree_left FuncTree);
(pointsto FuncTree FuncTree_right FuncTree);
comment ''unalloc_lonely_Object'' (ALL (x::obj). ((((x :: obj) : (Object :: obj set)) & ((x :: obj) ~: (Object_alloc :: obj set))) --> ((ALL (y::obj). (((fieldRead Pair_data y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead FuncTree_data y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead FuncTree_left y) :: obj) ~= (x :: obj))) & (ALL (y::obj). (((fieldRead FuncTree_right y) :: obj) ~= (x :: obj))) & (((fieldRead Pair_data x) :: obj) = (null :: obj)) & (((fieldRead FuncTree_data x) :: obj) = (null :: obj)) & (((fieldRead FuncTree_left x) :: obj) = (null :: obj)) & (((fieldRead FuncTree_right x) :: obj) = (null :: obj)))));
(fieldRead (FuncTree_init :: (obj => bool)) (t :: obj));
comment ''FuncTree_PrivateInv content definition'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) ~= (null :: obj)) & (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))) --> (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (this :: obj)) :: ((int * obj)) set) = ((({((fieldRead (FuncTree_key :: (obj => int)) (this :: obj)), (fieldRead (FuncTree_data :: (obj => obj)) (this :: obj)))} Un (fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_left :: (obj => obj)) (this :: obj)))) Un (fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj)))) :: ((int * obj)) set))));
comment ''FuncTree_PrivateInv null implies empty'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) = (null :: obj))) --> (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (this :: obj)) :: ((int * obj)) set) = ({} :: ((int * obj)) set))));
comment ''FuncTree_PrivateInv no null data'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) ~= (null :: obj))) --> (((fieldRead (FuncTree_data :: (obj => obj)) (this :: obj)) :: obj) ~= (null :: obj))));
comment ''FuncTree_PrivateInv init means left init'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))) --> (fieldRead (FuncTree_init :: (obj => bool)) (fieldRead (FuncTree_left :: (obj => obj)) (this :: obj)))));
comment ''FuncTree_PrivateInv init means right init'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))) --> (fieldRead (FuncTree_init :: (obj => bool)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj)))));
comment ''FuncTree_PrivateInv null is init'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) = (null :: obj))) --> (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))));
comment ''FuncTree_PrivateInv left children are smaller'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))) --> (ALL (k::int). (ALL (v::obj). ((((k, v) :: (int * obj)) : ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_left :: (obj => obj)) (this :: obj))) :: ((int * obj)) set)) --> (intless k (fieldRead (FuncTree_key :: (obj => int)) (this :: obj))))))));
comment ''FuncTree_PrivateInv right children are bigger'' (ALL (this::obj). ((((this :: obj) : (Object_alloc :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead (FuncTree_init :: (obj => bool)) (this :: obj))) --> (ALL (k::int). (ALL (v::obj). ((((k, v) :: (int * obj)) : ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj))) :: ((int * obj)) set)) --> ((fieldRead (FuncTree_key :: (obj => int)) (this :: obj)) < k))))));
comment ''t_type'' ((t :: obj) : (FuncTree :: obj set));
comment ''t_type'' ((t :: obj) : (Object_alloc :: obj set));
comment ''tmp_39_type'' ((tmp_39 :: obj) : (FuncTree :: obj set));
comment ''tmp_39_type'' ((tmp_39 :: obj) : (Object_alloc :: obj set));
comment ''tmp_38_type'' ((tmp_38 :: obj) : (FuncTree :: obj set));
comment ''tmp_38_type'' ((tmp_38 :: obj) : (Object_alloc :: obj set));
comment ''tmp_37_type'' ((tmp_37 :: obj) : (FuncTree :: obj set));
comment ''tmp_37_type'' ((tmp_37 :: obj) : (Object_alloc :: obj set));
comment ''tmp_35_type'' ((tmp_35 :: obj) : (FuncTree :: obj set));
comment ''tmp_35_type'' ((tmp_35 :: obj) : (Object_alloc :: obj set));
comment ''tmp_34_type'' ((tmp_34 :: obj) : (FuncTree :: obj set));
comment ''tmp_34_type'' ((tmp_34 :: obj) : (Object_alloc :: obj set));
comment ''tmp_33_type'' ((tmp_33 :: obj) : (FuncTree :: obj set));
comment ''tmp_33_type'' ((tmp_33 :: obj) : (Object_alloc :: obj set));
comment ''tmp_32_type'' ((tmp_32 :: obj) : (FuncTree :: obj set));
comment ''tmp_32_type'' ((tmp_32 :: obj) : (Object_alloc :: obj set));
comment ''tmp_30_type'' ((tmp_30 :: obj) : (FuncTree :: obj set));
comment ''tmp_30_type'' ((tmp_30 :: obj) : (Object_alloc :: obj set));
comment ''tmp_27_type'' ((tmp_27 :: obj) : (Object :: obj set));
comment ''tmp_27_type'' ((tmp_27 :: obj) : (Object_alloc :: obj set));
comment ''tmp_25_type'' ((tmp_25 :: obj) : (FuncTree :: obj set));
comment ''tmp_25_type'' ((tmp_25 :: obj) : (Object_alloc :: obj set));
comment ''r_type'' ((r :: obj) : (FuncTree :: obj set));
comment ''r_type'' ((r :: obj) : (Object_alloc :: obj set));
comment ''tmp_24_type'' ((tmp_24 :: obj) : (FuncTree :: obj set));
comment ''tmp_24_type'' ((tmp_24 :: obj) : (Object_alloc :: obj set));
comment ''tmp_23_type'' ((tmp_23 :: obj) : (FuncTree :: obj set));
comment ''tmp_23_type'' ((tmp_23 :: obj) : (Object_alloc :: obj set));
comment ''tmp_22_type'' ((tmp_22 :: obj) : (Object :: obj set));
comment ''tmp_22_type'' ((tmp_22 :: obj) : (Object_alloc :: obj set));
comment ''tmp_20_type'' ((tmp_20 :: obj) : (FuncTree :: obj set));
comment ''tmp_20_type'' ((tmp_20 :: obj) : (Object_alloc :: obj set));
comment ''tmp_19_type'' ((tmp_19 :: obj) : (Object :: obj set));
comment ''tmp_19_type'' ((tmp_19 :: obj) : (Object_alloc :: obj set));
comment ''tmp_17_type'' ((tmp_17 :: obj) : (FuncTree :: obj set));
comment ''tmp_17_type'' ((tmp_17 :: obj) : (Object_alloc :: obj set));
comment ''tmp_16_type'' ((tmp_16 :: obj) : (Pair :: obj set));
comment ''tmp_16_type'' ((tmp_16 :: obj) : (Object_alloc :: obj set));
comment ''tmp_15_type'' ((tmp_15 :: obj) : (FuncTree :: obj set));
comment ''tmp_15_type'' ((tmp_15 :: obj) : (Object_alloc :: obj set));
comment ''m_type'' ((m :: obj) : (Pair :: obj set));
comment ''m_type'' ((m :: obj) : (Object_alloc :: obj set));
comment ''tmp_14_type'' ((tmp_14 :: obj) : (FuncTree :: obj set));
comment ''tmp_14_type'' ((tmp_14 :: obj) : (Object_alloc :: obj set));
comment ''tmp_12_type'' ((tmp_12 :: obj) : (FuncTree :: obj set));
comment ''tmp_12_type'' ((tmp_12 :: obj) : (Object_alloc :: obj set));
comment ''tmp_11_type'' ((tmp_11 :: obj) : (FuncTree :: obj set));
comment ''tmp_11_type'' ((tmp_11 :: obj) : (Object_alloc :: obj set));
comment ''tmp_9_type'' ((tmp_9 :: obj) : (FuncTree :: obj set));
comment ''tmp_9_type'' ((tmp_9 :: obj) : (Object_alloc :: obj set));
comment ''tmp_6_type'' ((tmp_6 :: obj) : (FuncTree :: obj set));
comment ''tmp_6_type'' ((tmp_6 :: obj) : (Object_alloc :: obj set));
comment ''tmp_4_type'' ((tmp_4 :: obj) : (FuncTree :: obj set));
comment ''tmp_4_type'' ((tmp_4 :: obj) : (Object_alloc :: obj set));
(~(((t :: obj) = (null :: obj)) :: bool));
(~(((k :: int) = ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: bool));
((tmp_25_30 :: obj) ~= (null :: obj));
((tmp_25_30 :: obj) ~: (Object_alloc :: obj set));
((tmp_25_30 :: obj) : (FuncTree :: obj set));
(ALL (y::obj). (((fieldRead Pair_data y) :: obj) ~= (tmp_25_30 :: obj)));
(ALL (y::obj). (((fieldRead FuncTree_data y) :: obj) ~= (tmp_25_30 :: obj)));
(ALL (y::obj). (((fieldRead FuncTree_left y) :: obj) ~= (tmp_25_30 :: obj)));
(ALL (y::obj). (((fieldRead FuncTree_right y) :: obj) ~= (tmp_25_30 :: obj)));
(((fieldRead Pair_data tmp_25_30) :: obj) = (null :: obj));
(((fieldRead FuncTree_data tmp_25_30) :: obj) = (null :: obj));
(((fieldRead FuncTree_left tmp_25_30) :: obj) = (null :: obj));
(((fieldRead FuncTree_right tmp_25_30) :: obj) = (null :: obj));
(~((intless (k :: int) ((fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (t :: obj)) :: int)) :: bool));
(intless (fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (t :: obj)) (k :: int));
(~((((fieldRead (FuncTree_right :: (obj => obj)) (t :: obj)) :: obj) = (null :: obj)) :: bool));
comment ''FuncTree.remove_PostconditionInCall'' (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (result_5 :: obj));
comment ''FuncTree.remove_PostconditionInCall'' (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (result_5 :: obj)) :: ((int * obj)) set) = ((((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) ((fieldRead (FuncTree_right :: (obj => obj)) (t :: obj)) :: obj)) :: ((int * obj)) set) - ({p. (EX (x::int) (y::obj). (((p :: (int * obj)) = ((x, y) :: (int * obj))) & ((x :: int) = (k :: int))))} :: ((int * obj)) set)) :: ((int * obj)) set));
comment ''FuncTree.remove_PostconditionInCall'' (((Object_alloc Un {tmp_25_30}) :: obj set) \<subseteq> (Object_alloc_4 :: obj set));
comment ''FuncTree_PrivateInv content definitionFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) ~= (null :: obj)) & (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))) --> (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (this :: obj)) :: ((int * obj)) set) = ((({((fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (this :: obj)), (fieldRead ((fieldWrite (FuncTree_data :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_data :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (this :: obj)))} Un (fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_left :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_left :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (this :: obj)))) Un (fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj)))) :: ((int * obj)) set))));
comment ''FuncTree_PrivateInv null implies emptyFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) = (null :: obj))) --> (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (this :: obj)) :: ((int * obj)) set) = ({} :: ((int * obj)) set))));
comment ''FuncTree_PrivateInv no null dataFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) ~= (null :: obj))) --> (((fieldRead ((fieldWrite (FuncTree_data :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_data :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (this :: obj)) :: obj) ~= (null :: obj))));
comment ''FuncTree_PrivateInv init means left initFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))) --> (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (fieldRead ((fieldWrite (FuncTree_left :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_left :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (this :: obj)))));
comment ''FuncTree_PrivateInv init means right initFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))) --> (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj)))));
comment ''FuncTree_PrivateInv null is initFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & ((this :: obj) = (null :: obj))) --> (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))));
comment ''FuncTree_PrivateInv left children are smallerFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))) --> (ALL (k__7::int). (ALL (v::obj). ((((k__7, v) :: (int * obj)) : ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_left :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_left :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (this :: obj))) :: ((int * obj)) set)) --> (intless k__7 (fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (this :: obj))))))));
comment ''FuncTree_PrivateInv right children are biggerFuncTree.remove_PostconditionInCall'' (ALL (this::obj). ((((this :: obj) : (Object_alloc_4 :: obj set)) & ((this :: obj) : (FuncTree :: obj set)) & (fieldRead ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (this :: obj))) --> (ALL (k__8::int). (ALL (v::obj). ((((k__8, v) :: (int * obj)) : ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead (FuncTree_right :: (obj => obj)) (this :: obj))) :: ((int * obj)) set)) --> ((fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (this :: obj)) < k__8))))));
comment ''tmp_39_type'' ((result_5 :: obj) : (FuncTree :: obj set));
comment ''tmp_39_type'' ((result_5 :: obj) : (Object_alloc_4 :: obj set));
(ALL (x::int). (ALL (y::obj). ((((x, y) :: (int * obj)) : ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_left :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_left :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (tmp_25_30 :: obj))) :: ((int * obj)) set)) --> (intless x (fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (tmp_25_30 :: obj))))));
(ALL (y::obj). ((((k :: int), y) :: (int * obj)) ~: ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_right :: (obj => obj)) (tmp_25_30 :: obj) (result_5 :: obj)) :: (obj => obj)) (tmp_25_30 :: obj))) :: ((int * obj)) set)));
(ALL (y::obj). ((((k :: int), y) :: (int * obj)) ~: ((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_left :: (obj => obj)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_left :: (obj => obj)) (t :: obj)) :: obj)) :: (obj => obj)) (tmp_25_30 :: obj))) :: ((int * obj)) set)));
((this :: obj) : (Object_alloc_4 :: obj set));
((this :: obj) : (FuncTree :: obj set));
(fieldRead ((fieldWrite ((fieldWrite (FuncTree_init :: (obj => bool)) (tmp_25_30 :: obj) False) :: (obj => bool)) (tmp_25_30 :: obj) True) :: (obj => bool)) (this :: obj));
(((k__6, v) :: (int * obj)) : ((fieldRead ((fieldWrite (FuncTree_content :: (obj => ((int * obj)) set)) (tmp_25_30 :: obj) (((fieldRead (FuncTree_content :: (obj => ((int * obj)) set)) (t :: obj)) :: ((int * obj)) set) - ({p. (EX (x::int) (y::obj). (((p :: (int * obj)) = ((x, y) :: (int * obj))) & ((x :: int) = (k :: int))))} :: ((int * obj)) set))) :: (obj => ((int * obj)) set)) (fieldRead ((fieldWrite (FuncTree_right :: (obj => obj)) (tmp_25_30 :: obj) (result_5 :: obj)) :: (obj => obj)) (this :: obj))) :: ((int * obj)) set))|]  ==>
    comment ''FuncTree_PrivateInv right children are bigger_ReturnStatement'' ((fieldRead ((fieldWrite (FuncTree_key :: (obj => int)) (tmp_25_30 :: obj) ((fieldRead (FuncTree_key :: (obj => int)) (t :: obj)) :: int)) :: (obj => int)) (this :: obj)) < k__6))
