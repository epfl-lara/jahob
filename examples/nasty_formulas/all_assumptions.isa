([|((fieldRead Pair_data null) = null);
((fieldRead FuncTree_data null) = null);
((fieldRead FuncTree_left null) = null);
((fieldRead FuncTree_right null) = null);
(ALL xObj. (xObj : Object));
((Pair Int FuncTree) = {null});
((Array Int FuncTree) = {null});
((Array Int Pair) = {null});
(null : Object_alloc);
(pointsto Pair Pair_data Object);
(pointsto FuncTree FuncTree_data Object);
(pointsto FuncTree FuncTree_left FuncTree);
(pointsto FuncTree FuncTree_right FuncTree);
comment ''unalloc_lonely_Object'' (ALL x. (((x : Object) & (x ~: Object_alloc)) --> ((ALL y. ((fieldRead Pair_data y) ~= x)) & (ALL y. ((fieldRead FuncTree_data y) ~= x)) & (ALL y. ((fieldRead FuncTree_left y) ~= x)) & (ALL y. ((fieldRead FuncTree_right y) ~= x)) & ((fieldRead Pair_data x) = null) & ((fieldRead FuncTree_data x) = null) & ((fieldRead FuncTree_left x) = null) & ((fieldRead FuncTree_right x) = null))));
(fieldRead FuncTree_init t);
comment ''FuncTree_PrivateInv content definition'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (this ~= null) & (fieldRead FuncTree_init this)) --> ((fieldRead FuncTree_content this) = (({((fieldRead FuncTree_key this), (fieldRead FuncTree_data this))} Un (fieldRead FuncTree_content (fieldRead FuncTree_left this))) Un (fieldRead FuncTree_content (fieldRead FuncTree_right this))))));
comment ''FuncTree_PrivateInv null implies empty'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (this = null)) --> ((fieldRead FuncTree_content this) = {})));
comment ''FuncTree_PrivateInv no null data'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (this ~= null)) --> ((fieldRead FuncTree_data this) ~= null)));
comment ''FuncTree_PrivateInv init means left init'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (fieldRead FuncTree_init this)) --> (fieldRead FuncTree_init (fieldRead FuncTree_left this))));
comment ''FuncTree_PrivateInv init means right init'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (fieldRead FuncTree_init this)) --> (fieldRead FuncTree_init (fieldRead FuncTree_right this))));
comment ''FuncTree_PrivateInv null is init'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (this = null)) --> (fieldRead FuncTree_init this)));
comment ''FuncTree_PrivateInv left children are smaller'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (fieldRead FuncTree_init this)) --> (ALL k. (ALL v. (((k, v) : (fieldRead FuncTree_content (fieldRead FuncTree_left this))) --> (intless k (fieldRead FuncTree_key this)))))));
comment ''FuncTree_PrivateInv right children are bigger'' (ALL this. (((this : Object_alloc) & (this : FuncTree) & (fieldRead FuncTree_init this)) --> (ALL k. (ALL v. (((k, v) : (fieldRead FuncTree_content (fieldRead FuncTree_right this))) --> ((fieldRead FuncTree_key this) < k))))));
comment ''t_type'' (t : FuncTree);
comment ''t_type'' (t : Object_alloc);
comment ''tmp_39_type'' (tmp_39 : FuncTree);
comment ''tmp_39_type'' (tmp_39 : Object_alloc);
comment ''tmp_38_type'' (tmp_38 : FuncTree);
comment ''tmp_38_type'' (tmp_38 : Object_alloc);
comment ''tmp_37_type'' (tmp_37 : FuncTree);
comment ''tmp_37_type'' (tmp_37 : Object_alloc);
comment ''tmp_35_type'' (tmp_35 : FuncTree);
comment ''tmp_35_type'' (tmp_35 : Object_alloc);
comment ''tmp_34_type'' (tmp_34 : FuncTree);
comment ''tmp_34_type'' (tmp_34 : Object_alloc);
comment ''tmp_33_type'' (tmp_33 : FuncTree);
comment ''tmp_33_type'' (tmp_33 : Object_alloc);
comment ''tmp_32_type'' (tmp_32 : FuncTree);
comment ''tmp_32_type'' (tmp_32 : Object_alloc);
comment ''tmp_30_type'' (tmp_30 : FuncTree);
comment ''tmp_30_type'' (tmp_30 : Object_alloc);
comment ''tmp_27_type'' (tmp_27 : Object);
comment ''tmp_27_type'' (tmp_27 : Object_alloc);
comment ''tmp_25_type'' (tmp_25 : FuncTree);
comment ''tmp_25_type'' (tmp_25 : Object_alloc);
comment ''r_type'' (r : FuncTree);
comment ''r_type'' (r : Object_alloc);
comment ''tmp_24_type'' (tmp_24 : FuncTree);
comment ''tmp_24_type'' (tmp_24 : Object_alloc);
comment ''tmp_23_type'' (tmp_23 : FuncTree);
comment ''tmp_23_type'' (tmp_23 : Object_alloc);
comment ''tmp_22_type'' (tmp_22 : Object);
comment ''tmp_22_type'' (tmp_22 : Object_alloc);
comment ''tmp_20_type'' (tmp_20 : FuncTree);
comment ''tmp_20_type'' (tmp_20 : Object_alloc);
comment ''tmp_19_type'' (tmp_19 : Object);
comment ''tmp_19_type'' (tmp_19 : Object_alloc);
comment ''tmp_17_type'' (tmp_17 : FuncTree);
comment ''tmp_17_type'' (tmp_17 : Object_alloc);
comment ''tmp_16_type'' (tmp_16 : Pair);
comment ''tmp_16_type'' (tmp_16 : Object_alloc);
comment ''tmp_15_type'' (tmp_15 : FuncTree);
comment ''tmp_15_type'' (tmp_15 : Object_alloc);
comment ''m_type'' (m : Pair);
comment ''m_type'' (m : Object_alloc);
comment ''tmp_14_type'' (tmp_14 : FuncTree);
comment ''tmp_14_type'' (tmp_14 : Object_alloc);
comment ''tmp_12_type'' (tmp_12 : FuncTree);
comment ''tmp_12_type'' (tmp_12 : Object_alloc);
comment ''tmp_11_type'' (tmp_11 : FuncTree);
comment ''tmp_11_type'' (tmp_11 : Object_alloc);
comment ''tmp_9_type'' (tmp_9 : FuncTree);
comment ''tmp_9_type'' (tmp_9 : Object_alloc);
comment ''tmp_6_type'' (tmp_6 : FuncTree);
comment ''tmp_6_type'' (tmp_6 : Object_alloc);
comment ''tmp_4_type'' (tmp_4 : FuncTree);
comment ''tmp_4_type'' (tmp_4 : Object_alloc);
(t ~= null);
(k ~= (fieldRead FuncTree_key t));
(tmp_25_30 ~= null);
(tmp_25_30 ~: Object_alloc);
(tmp_25_30 : FuncTree);
(ALL y. ((fieldRead Pair_data y) ~= tmp_25_30));
(ALL y. ((fieldRead FuncTree_data y) ~= tmp_25_30));
(ALL y. ((fieldRead FuncTree_left y) ~= tmp_25_30));
(ALL y. ((fieldRead FuncTree_right y) ~= tmp_25_30));
((fieldRead Pair_data tmp_25_30) = null);
((fieldRead FuncTree_data tmp_25_30) = null);
((fieldRead FuncTree_left tmp_25_30) = null);
((fieldRead FuncTree_right tmp_25_30) = null);
(intless k (fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) t));
((fieldRead FuncTree_left t) ~= null);
comment ''FuncTree.remove_PostconditionInCall'' (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) result_17);
comment ''FuncTree.remove_PostconditionInCall'' ((fieldRead FuncTree_content result_17) = ((fieldRead FuncTree_content (fieldRead FuncTree_left t)) - {p. (EX x y. ((p = (x, y)) & (x = k)))}));
comment ''FuncTree.remove_PostconditionInCall'' ((Object_alloc Un {tmp_25_30}) \<subseteq> Object_alloc_16);
comment ''FuncTree_PrivateInv content definitionFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (this ~= null) & (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)) --> ((fieldRead FuncTree_content this) = (({((fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) this), (fieldRead (fieldWrite FuncTree_data tmp_25_30 (fieldRead FuncTree_data t)) this))} Un (fieldRead FuncTree_content (fieldRead FuncTree_left this))) Un (fieldRead FuncTree_content (fieldRead FuncTree_right this))))));
comment ''FuncTree_PrivateInv null implies emptyFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (this = null)) --> ((fieldRead FuncTree_content this) = {})));
comment ''FuncTree_PrivateInv no null dataFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (this ~= null)) --> ((fieldRead (fieldWrite FuncTree_data tmp_25_30 (fieldRead FuncTree_data t)) this) ~= null)));
comment ''FuncTree_PrivateInv init means left initFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)) --> (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) (fieldRead FuncTree_left this))));
comment ''FuncTree_PrivateInv init means right initFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)) --> (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) (fieldRead FuncTree_right this))));
comment ''FuncTree_PrivateInv null is initFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (this = null)) --> (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)));
comment ''FuncTree_PrivateInv left children are smallerFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)) --> (ALL k__11. (ALL v. (((k__11, v) : (fieldRead FuncTree_content (fieldRead FuncTree_left this))) --> (intless k__11 (fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) this)))))));
comment ''FuncTree_PrivateInv right children are biggerFuncTree.remove_PostconditionInCall'' (ALL this. (((this : Object_alloc_16) & (this : FuncTree) & (fieldRead (fieldWrite FuncTree_init tmp_25_30 False) this)) --> (ALL k__12. (ALL v. (((k__12, v) : (fieldRead FuncTree_content (fieldRead FuncTree_right this))) --> ((fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) this) < k__12))))));
comment ''tmp_33_type'' (result_17 : FuncTree);
comment ''tmp_33_type'' (result_17 : Object_alloc_16);
(ALL x. (ALL y. (((x, y) : (fieldRead FuncTree_content (fieldRead (fieldWrite FuncTree_right tmp_25_30 (fieldRead FuncTree_right t)) tmp_25_30))) --> ((fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) tmp_25_30) < x))));
(ALL y. ((k, y) ~: (fieldRead FuncTree_content (fieldRead (fieldWrite FuncTree_right tmp_25_30 (fieldRead FuncTree_right t)) tmp_25_30))));
(ALL y. ((k, y) ~: (fieldRead FuncTree_content (fieldRead (fieldWrite FuncTree_left tmp_25_30 result_17) tmp_25_30))));
(this : Object_alloc_16);
(this : FuncTree);
(fieldRead (fieldWrite (fieldWrite FuncTree_init tmp_25_30 False) tmp_25_30 True) this);
((k__10, v) : (fieldRead (fieldWrite FuncTree_content tmp_25_30 ((fieldRead FuncTree_content t) - {p. (EX x y. ((p = (x, y)) & (x = k)))})) (fieldRead (fieldWrite FuncTree_right tmp_25_30 (fieldRead FuncTree_right t)) this)))|] ==>
    comment ''FuncTree_PrivateInv right children are bigger_ReturnStatement'' ((fieldRead (fieldWrite FuncTree_key tmp_25_30 (fieldRead FuncTree_key t)) this) < k__10))
